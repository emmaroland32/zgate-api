---
version: '3.7'
services:

#  # Eureka Server
#  discovery-server:
#    build: ./discovery-server
#    #    image: zgate-api/discovery-server:latest
#    container_name: discovery-server
#    ports:
#      - "8761:8761"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - zipkin


#  api-gateway:
#    #    image: zgate-api/api-gateway:latest
#    build: ./api-gateway
#    container_name: api-gateway
#    ports:
#      - "8181:8080"
#    expose:
#      - "8181"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
#    depends_on:
#      - zipkin
#      - discovery-server
#      - keycloak

  #  ## USER-Service Docker Compose Config
#  user-service:
#    container_name: user-service
#    build: ./user-service
##    image: zgate-api/user-service:latest
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-user:5431/user-service
#    depends_on:
#      - postgres-user
#      - broker
#      - zipkin
#      - discovery-server
#      - api-gateway
#
#    ## Customer-Service Docker Compose Config
#  customer-service:
#    container_name: customer-service
#    build: ./customer-service
##    image: zgate-api/customer-service:latest
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-customer:5431/customer-service
#    depends_on:
#      - postgres-customer
#      - broker
#      - zipkin
#      - discovery-server
#      - api-gateway
#
#    ## Portfolio-Service Docker Compose Config
#  portfolio-service:
#    container_name: portfolio-service
#    build: ./portfolio-service
##    image: zgate-api/portfolio-service:latest
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-portfolio:5432/portfolio-service
#    depends_on:
#      - postgres-portfolio
#      - discovery-server
#      - api-gateway
#      - zipkin
#
#    ## Notification-Service Docker Compose Config
#  notification-service:
#    container_name: notification-service
#    build: ./notification-service
##    image: zgate-api/notification-service:latest
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - zipkin
#      - broker
#      - discovery-server
#      - api-gateway
#
#  ## POSTGRESS Docker Compose Config
#
#  ## USER-SERVICE POSTGRES Docker Compose Config
#  postgres-user:
#    container_name: postgres-user
#    image: postgres:latest
#    environment:
#      POSTGRES_DB: user-service
#      POSTGRES_USER: zgate
#      POSTGRES_PASSWORD: password
#      PGDATA: /data/postgres
#    volumes:
#      - ./infrastructure/postgres-user:/data/postgres
#    expose:
#      - "5432"
#    ports:
#      - "5432:5432"
#    command: -p 5432
#    restart: always
#
#  ## CUSTOMER-SERVICE POSTGRES Docker Compose Config
#  postgres-customer:
#    container_name: postgres-customer
#    image: postgres:latest
#    environment:
#      POSTGRES_DB: customer-service
#      POSTGRES_USER: zgate
#      POSTGRES_PASSWORD: password
#      PGDATA: /data/postgres
#    volumes:
#      - ./infrastructure/postgres-customer:/data/postgres
#    ports:
#      - "5433:5433"
#    restart: always
#
#  ## PORTFOLIO-SERVICE POSTGRES Docker Compose Config
#  postgres-portfolio:
#    container_name: postgres-portfolio
#    image: postgres:latest
#    environment:
#      POSTGRES_DB: portfolio-service
#      POSTGRES_USER: zgate
#      POSTGRES_PASSWORD: password
#      PGDATA: /data/postgres
#    volumes:
#      - ./infrastructure/postgres-customer:/data/postgres
#    ports:
#      - "5434:5434"
#    restart: always

  ## Keycloak Config with Mysql database
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:latest
    volumes:
      - ./infrastructure/mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./infrastructure/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    platform: linux/amd64
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    platform: linux/amd64
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"




  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    depends_on:
#      - customer-service
#      - user-service
#      - portfolio-service
#      - notification-service

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./infrastructure/grafana/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
